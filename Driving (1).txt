#include <iostream>
#include <stdlib.h>
#include <math.h>
#include<iostream>
#include<sstream>
#include <string>
#include<string.h>
#include <GL/glut.h>
#include <gl/stb_image.h>
using namespace std;
static float xPosition = -.55;
int static car_speed = 60;
int static current_speed = 45;
float car_movement = 4;
float static obstacle = -3.3;
float static yPosition = 2;
int static car_position = 0;
int static score = 0;
int static totalMeter = 0;
float static sky_red = 0.6;
float static sky_green = .8;
float sky_blue = 1.0;
int roadlight = 50;


void sprint(float x, float y, string st)
{
	int l, i;
	glColor3f(0.0, 0.0, 0.0);
	glRasterPos2f(x, y);
	for (i = 0; i < st.length(); i++)
	{
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, st[i]);

	}
}

void keyboardown(int key, int x, int y)
{
	switch (key) {

	case GLUT_KEY_RIGHT:
		xPosition = .55;
		car_position = 1;
		break;



	case GLUT_KEY_LEFT:
		xPosition = -.55;
		car_position = 0;
		break;


	case GLUT_KEY_UP:
		if (car_speed > 5) {
			car_speed -= 5;
			current_speed += 5;
		}

		else
			car_speed = car_speed;
		break;


	case GLUT_KEY_DOWN:
		if (car_speed < 60) {
			car_speed += 5;
			current_speed -= 5;
		}

		else
			car_speed = car_speed;
		break;


	default:
		break;
	}
}

void reshape(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 1.0, 1.0, 3200);
	gluLookAt(
		-2, 3, 8,
		-1, -3, -10,
		0, 2, 0
	);
	glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y)
{
	if (key == 'a')
	{
		sky_red = 0;
		sky_green = 0.2;
		sky_blue = 0.25;
		roadlight = 255;


	}

	else if (key == 's')
	{
		sky_red = 0.6;
		sky_green = 0.8;
		sky_blue = 1.0;
		roadlight = 50;

	}

	else if (key == 'd')
	{
		exit(1);
	}

}




void collision()
{

	if (0 > (car_movement - obstacle) && -1 < (car_movement - obstacle) && car_position == 1)
	{
		cout << "Game Over\n";
		cout << "the final score is : " << score << endl;
		cout << "the distance travelled is : " << totalMeter << endl;
		exit(1);
		
	}

	else if (0 > (car_movement - (obstacle - 10)) && -1 < (car_movement - (obstacle - 10)) && car_position == 0)
	{
		cout << "Game Over\n";
		cout << "the final score is : " << score << endl;
		cout << "the distance travelled is : " << totalMeter << endl;
		exit(1);
		
	}

	else if (0 > (car_movement - (obstacle - 20)) && -1 < (car_movement - (obstacle - 20)) && car_position == 0)
	{
		cout << "Game Over\n";
		cout << "the final score is : " << score << endl;
		cout << "the distance travelled is : " << totalMeter << endl;
		exit(1);
		
	}

	else if (0 > (car_movement - (obstacle - 30)) && -1 < (car_movement - (obstacle - 30)) && car_position == 1)
	{
		cout << "Game Over\n";
		cout << "the final score is : " << score << endl;
		cout << "the distance travelled is : " << totalMeter << endl;
		exit(1);
		
	}


	else if (0 > (car_movement - (obstacle - 30)) && -1 < (car_movement - (obstacle - 30)) && car_position == 0)
	{
		obstacle -= 40;
	}

	else if(score > 420)
	{
		exit(1);
	}
}

void GameScore()
{
	if (0 > (car_movement - obstacle) && -1 < (car_movement - obstacle) && car_position == 0)
	{
		score++;
	}

	else if (0 > (car_movement - (obstacle - 10)) && -1 < (car_movement - (obstacle - 10)) && car_position == 1)
	{
		score++;
	}

	else if (0 > (car_movement - (obstacle - 20)) && -1 < (car_movement - (obstacle - 20)) && car_position == 1)
	{

		score++;
	}

	else if (0 > (car_movement - (obstacle - 30)) && -1 < (car_movement - (obstacle - 30)) && car_position == 0)
	{
		score += 10;
	}

	else if (0 > (car_movement - (obstacle - 35)) && -1 < (car_movement - (obstacle - 35)) && car_position == 0)
	{
		score += 10;
	}


	else {
		totalMeter++;
	}
}
void initRendering() {
	glEnable(GL_DEPTH_TEST);
}

void handleResize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (double)w / (double)h, 1.0, 200.0);
}
float rtri = 0;
float _angle = 0.0;
float _cameraAngle = -5.0;
float _ang_tri = 0.0;


void gamercar()
{
	glPushMatrix();
	glTranslatef(xPosition, -1.0, 3.5);
	glPushMatrix();
	glRotatef(-10, -1.0, 0.0, 0.0);
	glScalef(1.3, 0.8, 2.0);
	glColor3f(1, 1, 1);
	glBegin(GL_QUADS);
	// Top face 
	glColor3f(1, 1, 1);
	glVertex3f(0.15, 0.15, -0.15);
	glVertex3f(-0.15, 0.15, -0.15);
	glVertex3f(-0.15, 0.15, 0.15);
	glVertex3f(0.15, 0.15, 0.15);

	// Bottom face 
	glColor3f(1, 1, 1);
	glVertex3f(0.15, -0.15, 0.15);
	glVertex3f(-0.15, -0.15, 0.15);
	glVertex3f(-0.15, -0.15, -0.15);
	glVertex3f(0.15, -0.15, -0.15);

	// Front face
	glColor3f(1, 1, 1);
	glVertex3f(0.15, 0.15, 0.15);
	glVertex3f(-0.15, 0.15, 0.15);
	glVertex3f(-0.15, -0.15, 0.15);
	glVertex3f(0.15, -0.15, 0.15);

	// Back face 
	glColor3f(1, 1, 1);
	glVertex3f(0.15, -0.15, -0.15);
	glVertex3f(-0.15, -0.15, -0.15);
	glVertex3f(-0.15, 0.15, -0.15);
	glVertex3f(0.15, 0.15, -0.15);

	// Left face 
	glColor3f(1, 1, 1);
	glVertex3f(-0.15, 0.15, 0.15);
	glVertex3f(-0.15, 0.15, -0.15);
	glVertex3f(-0.15, -0.15, -0.15);
	glVertex3f(-0.15, -0.15, 0.15);

	// Right face 
	glColor3f(1, 1, 1);
	glVertex3f(0.15, 0.15, -0.15);
	glVertex3f(0.15, 0.15, 0.15);
	glVertex3f(0.15, -0.15, 0.15);
	glVertex3f(0.15, -0.15, -0.15);
	glEnd();
	//glutSolidCube(.3);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.0, .15, 0.0);
	glRotatef(-10, -1.0, 0.0, 0.0);
	glScalef(1.0, .5, .5);
	glColor3f(0, 0, 0);
	glutSolidCube(.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.21, -0.12, 0.10);
	glRotatef(80, 0.0, 1.2, 0.0);
	glScalef(.07, .14, .07);
	glColor3f(1, 0, 0);
	glutWireTorus(.2, .4, 20, 15);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.21, 0.0, -0.2);
	glRotatef(80, 0.0, 1.2, 0.0);
	glScalef(.07, .14, .07);
	glColor3f(1, 0, 0);
	glutWireTorus(.2, .4, 20, 15);
	glPopMatrix();


	glPushMatrix();
	glTranslatef(-0.21, -0.12, 0.10);
	glRotatef(80, 0.0, 1.2, 0.0);
	glScalef(.07, .14, .07);
	glColor3f(1, 0, 0);
	glutWireTorus(.2, .4, 20, 15);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.21, 0.0, -0.2);
	glRotatef(80, 0.0, 1.2, 0.0);
	glScalef(.07, .14, .07);
	glColor3f(1, 0, 0);
	glutWireTorus(.2, .4, 20, 15);
	glPopMatrix();


	glPushMatrix();
	glTranslatef(-0.10, -0.10, 0.30);
	glRotatef(80, 0.0, 1.2, 0.0);
	glScalef(.07, .03, .07);
	glColor3f(1, .5, 0);
	glutSolidCube(1);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.10, -0.10, 0.30);
	glRotatef(80, 0.0, 1.2, 0.0);
	glScalef(.07, .03, .07);
	glColor3f(1, .5, 0);
	glutSolidCube(1);
	glPopMatrix();

	glPopMatrix();

}

void roadside()
{


	for (float z = -38; z < 400; z += 4)
	{
		glPushMatrix();
		glColor3ub(200, 200, 200);
		glTranslatef(-1.20, z, .40);
		glScalef(.2, .2, 3);
		glutSolidCube(.4);
		glPopMatrix();
		glPushMatrix();
		glColor3ub(200, 200, 200);
		glTranslatef(-.84, z, 1.0);
		glScalef(2, .2, .2);
		glutSolidCube(.4);
		glPopMatrix();

		glPushMatrix();
		glColor4ub(255, 255, 255, roadlight);
		glTranslatef(-.44, z, 0.70);
		glutSolidCone(.2, .3, 15, 20);
		glPopMatrix();
	}




	glBegin(GL_QUADS);
	glColor3ub(0, 155, 20);
	glVertex3f(-5.0, -10, 0);
	glVertex3f(-1.0, -10, 0);
	glVertex3f(-1.0, 400, 0);
	glVertex3f(-5.0, 400, 0);
	glEnd();
	glBegin(GL_QUADS);
	glColor3ub(0, 155, 20);
	glVertex3f(1.0, -10, 0);
	glVertex3f(5.0, -10, 0);
	glVertex3f(5.0, 400, 0);
	glVertex3f(1.0, 400, 0);
	glEnd();


}

void house() {
	for (float z = -40; z < 400; z += 4.8)
	{
		glPushMatrix();
		glScalef(1.0, 1.0, 1.0);
		glPushMatrix();
		glColor3ub(70, 61, 46);
		glTranslatef(-3.0, z, .30);
		glutSolidCube(1);
		glPopMatrix();

		glPushMatrix();
		glColor3ub(255, 255, 255);
		glTranslatef(-2.55, z, .40);
		glutSolidCube(.2);
		glPopMatrix();

		glPushMatrix();
		glColor3ub(255, 255, 255);
		glTranslatef(-2.9, z - .5, .2);
		glScalef(.6, .2, 1);
		glutSolidCube(.5);
		glPopMatrix();

		glPushMatrix();
		//glColor3f(1, 1, 0);
		glColor3ub(204, 102, 0);
		glRotatef(0, 0.0, 0.0, 0.0);
		glTranslatef(-3.0, z, .70);
		glutSolidCone(1, 1, 4, 6);
		glPopMatrix();
		glPopMatrix();

		//right side

		glPushMatrix();
		glPushMatrix();
		glColor3ub(70, 61, 46);
		glTranslatef(3.0, z, .30);
		glutSolidCube(1);
		glPopMatrix();

		glPushMatrix();
		glColor3f(1, 1, 1);
		glTranslatef(2.55, z, .40);
		glutSolidCube(.2);
		glPopMatrix();

		glPushMatrix();
		glColor3f(1, 1, 1);
		glTranslatef(2.9, z - .5, .2);
		glScalef(.6, .2, 1);
		glutSolidCube(.5);
		glPopMatrix();

		glPushMatrix();
		glColor3ub(204, 102, 0);
		glTranslatef(3.0, z, .60);
		glutSolidCone(1, .8, 4, 6);
		glPopMatrix();
		glPopMatrix();

	}
}
void tree() {
	for (float z = -40; z < 400; z += 4)
	{
		glPushMatrix();
		glPushMatrix();
		glColor3f(0, 1, 0);
		glTranslatef(-1.20, z, .45);
		glutSolidCone(.2, .4, 20, 10);
		glPopMatrix();
		glColor3ub(102, 51, 0);
		glTranslatef(-1.20, z, .25);
		glScalef(.2, .2, 1);
		glutSolidCube(.4);
		glPopMatrix();

		//right

		glPushMatrix();
		glPushMatrix();
		glColor3f(0, 1, 0);
		glTranslatef(1.20, z, .50);
		glutSolidCone(.2, .4, 20, 10);
		glPopMatrix();
		glColor3ub(102, 51, 0);
		glTranslatef(1.20, z, .30);
		glScalef(.2, .2, 1);
		glutSolidCube(.4);
		glPopMatrix();
	}

}




void roadline() {
	for (float z = -4; z < 6; z += 1)
	{
		glPushMatrix();

		glColor3f(1, 1, 1);
		glBegin(GL_QUADS);
		glVertex3f(-.03, z, 0);
		glVertex3f(.03, z, 0);
		glVertex3f(.03, z + .5, 0);
		glVertex3f(-.03, z + .5, 0);
		glEnd();
		glPopMatrix();
	}
}


void objectcube()
{
	for (float yPosition = -20; yPosition < 400; yPosition += 40)
	{
		glPushMatrix();
		glColor3f(0, 1, 0);
		glTranslatef(-.50, yPosition, -.1);
		glutSolidCube(.4);
		glPopMatrix();

		glPushMatrix();
		glColor3f(0, 1, 0);
		glTranslatef(.50, yPosition + 10, -.1);
		glutSolidCube(.4);
		glPopMatrix();

		glPushMatrix();
		glColor3f(0, 1, 0);
		glTranslatef(.50, yPosition + 20, -.1);
		glutSolidCube(.4);
		glPopMatrix();

		glPushMatrix();
		glColor3f(0, 1, 0);
		glTranslatef(-.50, yPosition + 30, -.1);
		glutSolidCube(.4);
		glPopMatrix();

	}
}


void road() {
	for (float z = -10; z < 400; z += 1)
	{
		glPushMatrix();
		glColor3f(1, 1, 1);
		glBegin(GL_QUADS);
		glVertex3f(-.03, z, 0);
		glVertex3f(.03, z, 0);
		glVertex3f(.03, z + .5, 0);
		glVertex3f(-.03, z + .5, 0);
		glEnd();
		glPopMatrix();
	}
	glPushMatrix();
	glColor3ub(0, 0, 0);
	glTranslatef(0.0, 0.0, -.50);
	glBegin(GL_QUADS);
	glVertex3f(-1.3, -10, 0);
	glVertex3f(1.3, -10, 0);
	glVertex3f(1.3, 400, 0);
	glVertex3f(-1.3, 400, 0);
	glEnd();


	glPopMatrix();


}

//Draws the 3D scene
void scene() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glMatrixMode(GL_MODELVIEW); //Switch to the drawing perspective
	glLoadIdentity(); //Reset the drawing perspective
	glRotatef(-_cameraAngle, 0.0, 1.0, 0.0); //Rotate the camera
	glTranslatef(0.0, 0.0, -7.0); //Move forward 5 units
	gamercar();
	glPushMatrix(); //Save the current state of transformations
	glTranslatef(0.0, 0.0, 0.0); //Move to the center of the triangle
	glRotatef(80, -1.0, 0.0, 0.0);

	glPushMatrix();
	glTranslatef(0.0, car_movement, 0.0);
	glClearColor(0.0, 0.0, 0.0, 1.0);
	road();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.0, car_movement, 0.0);
	tree();
	house();
	roadside();
	objectcube();
	GameScore();
	glPopMatrix();

	glPushMatrix();
	glColor3ub(0, 0, 0);
	glTranslatef(5.52, 0.0, 2.0);
	ostringstream cnvrt;
	cnvrt << score;
	sprint(-4, -2.3, "Score: " + cnvrt.str());
	glPopMatrix();


	glPushMatrix();
	glColor3ub(0, 0, 0);
	glTranslatef(5.5, 0.0, 1.8);
	ostringstream cnvrt2;
	cnvrt2 << totalMeter;
	sprint(-4, -2.4, "Distance Travel: " + cnvrt2.str());
	glPopMatrix();

	glPushMatrix();
	glColor3ub(0, 0, 0);
	glTranslatef(5.5, 0.0, 1.6);
	ostringstream cnvrt3;
	cnvrt3 << current_speed;
	sprint(-4, -2.4, "Speed: " + cnvrt3.str());
	glPopMatrix();

	glPopMatrix();
	glClearColor(sky_red, sky_green, sky_blue, 1.0);

	collision();
	glutSwapBuffers();
}

void update(int value) {
	car_movement -= 0.1f;
	_angle += 2.0f;
	if (_angle > 360) {
		_angle -= 360;

	}
	_ang_tri += 0.7f;
	if (_ang_tri > 80) {
		_ang_tri = 0;
	}

	glutPostRedisplay();

	//Tell GLUT to call update again in 25 milliseconds
	glutTimerFunc(car_speed, update, 0);
}


int main(int argc, char** argv) {
	//Initialize GLUT

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(800, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Transformations");
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glEnable(GL_BLEND);
	initRendering();
	glutDisplayFunc(scene);
	glutReshapeFunc(handleResize);
	glutTimerFunc(25, update, 0);
	glutKeyboardFunc(keyboard);
	glutSpecialFunc(keyboardown);
	glutMainLoop();
}
